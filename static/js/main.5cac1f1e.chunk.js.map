{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["formItemLayout","labelCol","xs","span","sm","wrapperCol","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleHomeValueChange","homeValue","setState","state","objectSpread","fields","isFormValid","validateForm","handleLoanToValueChange","loanToValue","handleRemainingBalanceChange","remainingBalance","_this$state","react_default","a","createElement","className","es_form","Item","assign","label","input_number","autoFocus","formatter","formatCurrency","max","min","onChange","parser","parseCurrency","precision","style","width","defaultValue","formatPercentage","parsePercentage","divider","statistic","title","value","calculateCreditLimit","Component","concat","replace","isValid","field","isFieldValid","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5cac1f1e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Divider, Form, InputNumber, Statistic } from \"antd\";\nimport \"./App.css\";\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 5 }\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 12 }\n  }\n};\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fields: {\n        homeValue: null,\n        loanToValue: 0.8,\n        remainingBalance: null\n      },\n      isFormValid: false\n    };\n  }\n\n  handleHomeValueChange = homeValue => {\n    this.setState(state => {\n      return {\n        ...state,\n        fields: { ...state.fields, homeValue },\n        isFormValid: validateForm(state.fields)\n      };\n    });\n  };\n\n  handleLoanToValueChange = loanToValue => {\n    this.setState(state => {\n      return {\n        ...state,\n        fields: { ...state.fields, loanToValue },\n        isFormValid: validateForm(state.fields)\n      };\n    });\n  };\n\n  handleRemainingBalanceChange = remainingBalance => {\n    this.setState(state => {\n      return {\n        ...state,\n        fields: { ...state.fields, remainingBalance },\n        isFormValid: validateForm(state.fields)\n      };\n    });\n  };\n\n  render() {\n    const { fields, isFormValid } = this.state;\n    return (\n      <div className=\"App\">\n        <Form>\n          <Form.Item {...formItemLayout} label=\"Home Value\">\n            <InputNumber\n              autoFocus\n              formatter={formatCurrency}\n              max={100000000}\n              min={0}\n              onChange={this.handleHomeValueChange}\n              parser={parseCurrency}\n              precision={2}\n              style={{ width: 200 }}\n            />\n          </Form.Item>\n          <Form.Item {...formItemLayout} label=\"Loan-to-Value\">\n            <InputNumber\n              defaultValue={80}\n              formatter={formatPercentage}\n              max={100}\n              min={0}\n              onChange={this.handleLoanToValueChange}\n              parser={parsePercentage}\n              style={{ width: 200 }}\n            />\n          </Form.Item>\n          <Form.Item {...formItemLayout} label=\"Remaining Mortgage Balance\">\n            <InputNumber\n              formatter={formatCurrency}\n              max={100000000}\n              min={0}\n              onChange={this.handleRemainingBalanceChange}\n              parser={parseCurrency}\n              precision={2}\n              style={{ width: 200 }}\n            />\n          </Form.Item>\n          <Divider />\n          <Statistic\n            precision={2}\n            title=\"HELOC Credit Limit\"\n            value={isFormValid ? calculateCreditLimit(fields) : 0}\n          />\n        </Form>\n      </div>\n    );\n  }\n}\n\n// helpers\nfunction calculateCreditLimit(fields) {\n  const { homeValue, loanToValue, remainingBalance } = fields;\n  return homeValue * loanToValue - remainingBalance;\n}\n\nfunction formatCurrency(value) {\n  return `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n\nfunction parseCurrency(value) {\n  return value.replace(/\\$\\s?|(,*)/g, \"\");\n}\n\nfunction formatPercentage(value) {\n  return `${value}%`;\n}\n\nfunction parsePercentage(value) {\n  return value.replace(\"%\", \"\");\n}\n\nfunction validateNumber(value) {\n  return typeof value === \"number\";\n}\n\nfunction validateForm(fields) {\n  let isValid = true;\n  for (let field in fields) {\n    const isFieldValid = validateNumber(fields[field]);\n    if (isValid && !isFieldValid) {\n      isValid = false;\n    }\n  }\n  return isValid;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}